name: Package and Release

on:
  push:
    branches:
      - master

jobs:
  release:
    runs-on: ${{ matrix.os }}

    strategy:
      matrix:
        os: [windows-latest]

    steps:
      - name: Checkout code
        uses: actions/checkout@v2
        with:
          fetch-depth: 2 # we need the last two commits to check if the version changed
        
      - name: Get package version
        id: check_versions
        run: |
          $previous_version = git show HEAD~1:release/app/package.json | Select-String -Pattern '"version":' | ForEach-Object { $_ -replace '.*: "(.*)"', '$1' }
          $current_version = git show HEAD:release/app/package.json | Select-String -Pattern '"version":' | ForEach-Object { $_ -replace '.*: "(.*)"', '$1' }

          Write-Host "previous_version=$previous_version" >> $Env:GITHUB_ENV
          Write-Host "current_version=$current_version" >> $Env:GITHUB_ENV

          if ($previous_version -ne $current_version) {
            Write-Host "version_changed=true" >> $Env:GITHUB_ENV
          } else {
            Write-Host "version_changed=false" >> $Env:GITHUB_ENV
          }

      - name: Install Node
        uses: actions/setup-node@v1
        with:
          node-version: 16

      - name: Install dependencies
        run: npm install

      - name: Build package
        run: npm run package

      - name: Upload artifact
        uses: actions/upload-artifact@v2
        with:
          name: ${{ format('D2RMM {0}.zip', env.current_version) }}
          path: ${{ format('release/build/D2RMM {0}.zip',  env.current_version) }}

      - name: Create release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ env.current_version }}
          release_name: ${{ format('D2RMM {0}', env.current_version) }}
          draft: false
          prerelease: true

      - name: Attach artifact to release
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ${{ format('release/build/D2RMM {0}.zip',  env.current_version) }}
          asset_name: ${{ format('D2RMM {0}.zip', env.current_version) }}
          asset_content_type: application/zip

      - name: Update release to full release
        if: env.version_changed == 'true'
        uses: actions/github-script@v4
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const { data: releases } = await github.repos.listReleases({
              owner: context.repo.owner,
              repo: context.repo.repo
            });
            const previousVersion = "${{ env.previous_version }}";
            const releaseToUpdate = releases.find(release => release.tag_name === `v${previousVersion}`);
            if (releaseToUpdate) {
              await github.repos.updateRelease({
                owner: context.repo.owner,
                repo: context.repo.repo,
                release_id: releaseToUpdate.id,
                tag_name: releaseToUpdate.tag_name,
                prerelease: false
              });
            }

import { Binding } from './Bindings';
import { ModConfigSingleValue } from './ModConfigValue';

/**
 * The structure of the "mod.json" file that D2RMM mods should provide.
 */
export interface ModConfig {
  /**
   * The type of the mod.
   * @ignore - This property is generated by D2RMM itself.
   */
  type: 'd2rmm' | 'data';

  /**
   * The name of the mod.
   */
  name: string;

  /**
   * A short description of the mod.
   */
  description?: string;

  /**
   * The author of the mod.
   */
  author?: string;

  /**
   * The website of the mod. Ideally, this should link to the Nexus Mods page for the mod.
   */
  website?: string;

  /**
   * The version of the mod.
   */
  version?: string;

  /**
   * The configuration for the mod. This allows the mod to set up a custom configuration UI
   * that the user can interact with to customize the behavior of the mod.
   *  @see {@link ModConfigSection}
   *  @see {@link ModConfigFieldCheckbox}
   *  @see {@link ModConfigFieldColor}
   *  @see {@link ModConfigFieldNumber}
   *  @see {@link ModConfigFieldSelect}
   *  @see {@link ModConfigFieldText}
   */
  config?: readonly ModConfigFieldOrSection[];
}

/**
 * A single configuration field or section.
 * @ignore
 */
export type ModConfigFieldOrSection = ModConfigSection | ModConfigField;

/**
 * The base structure of any element in the configuration UI.
 * @ignore
 */
export interface ModConfigBase {
  /**
   * The type of the configuration element.
   */
  type: string;

  /**
   * The unique identifier of the configuration element.
   */
  id: string;
}

/**
 * A section in the configuration UI that can contain other fields or sections.
 */
export interface ModConfigSection extends ModConfigBase {
  /**
   * The type of the configuration element.
   */
  type: 'section';

  /**
   * The name of the section.
   */
  name: string;

  /**
   * Whether the section should be expanded by default.
   */
  defaultExpanded?: boolean;

  /**
   * The fields or sections that are contained within this section.
   */
  children?: readonly ModConfigFieldOrSection[];
}

/**
 * The base structure of any configuration field in the configuration UI.
 * @ignore
 */
export interface ModConfigFieldBase extends ModConfigBase {
  /**
   * The description for the field that appears in a help tooltip.
   */
  description: string;

  /**
   * The name of the field.
   */
  name: string;

  /**
   * Determines if the field is visible or not.
   */
  visible?: Binding<boolean>;
}

/**
 * Represents a boolean (true/false) configuration field that will be represented
 * as a checkbox or toggle element in the configuration UI.
 */
export interface ModConfigFieldCheckbox extends ModConfigFieldBase {
  /**
   * The type of the configuration element.
   */
  type: 'checkbox';

  /**
   * The default value of the checkbox field.
   */
  defaultValue: boolean;
}

/**
 * Represents a number configuration field that will be represented as a number
 * input in the configuration UI.
 */
export interface ModConfigFieldNumber extends ModConfigFieldBase {
  /**
   * The type of the configuration element.
   */
  type: 'number';

  /**
   * The default value of the number field.
   */
  defaultValue: number;

  /**
   * The minimum value that the user can input.
   */
  minValue?: number;

  /**
   * The maximum value that the user can input.
   */
  maxValue?: number;
}

/**
 * Represents a text configuration field that will be represented as a text input
 * in the configuration UI.
 */
export interface ModConfigFieldText extends ModConfigFieldBase {
  /**
   * The type of the configuration element.
   */
  type: 'text';

  /**
   * The default value of the text field.
   */
  defaultValue: string;
}

/**
 * Represents a select configuration field that will be represented as a dropdown
 * select element in the configuration UI.
 */
export interface ModConfigFieldSelect extends ModConfigFieldBase {
  /**
   * The type of the configuration element.
   */
  type: 'select';

  /**
   * The default value of the select field.
   */
  defaultValue: ModConfigSingleValue;

  /**
   * The options that the user can select from.
   */
  options: {
    /**
     * The description of the option that appears underneath the label in the dropdown.
     */
    description?: string;

    /**
     * The label of the option that will be displayed in the dropdown.
     */
    label: string;

    /**
     * The value of the option that will be used when the user selects it.
     */
    value: ModConfigSingleValue;
  }[];
}

/**
 * Represents a color configuration field that will be represented as a color picker
 * element in the configuration UI.
 */
export interface ModConfigFieldColor extends ModConfigFieldBase {
  /**
   * The type of the configuration element.
   */
  type: 'color';

  /**
   * The default value of the color in RGBA format (`[0, 255]`, `[0, 255]`, `[0, 255]`, `[0.0, 1.0]`).
   */
  defaultValue: [number, number, number, number];

  /**
   * Whether the alpha channel should be hidden in the color picker.
   */
  isAlphaHidden?: boolean;
}

/**
 * Represents a single configuration field.
 * @ignore
 */
export type ModConfigField =
  | ModConfigFieldCheckbox
  | ModConfigFieldNumber
  | ModConfigFieldText
  | ModConfigFieldSelect
  | ModConfigFieldColor;
